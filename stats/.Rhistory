main="Coin flip frequencies",
xlab="side",
xlim=c(1,2))
hist(flip10,
main="Coin flip frequencies",
xlab="side",
xlim=c(1,2))
flip10 <- sample(c("heads","tails"),ten,replace=TRUE)
flip100 <- sample(2,hun,replace=TRUE)
flip1000 <- sample(2,thou,replace=TRUE)
flip10000 <- sample(2,tent,replace=TRUE)
hist(flip10,
main="Coin flip frequencies",
xlab="side",
xlim=c(1,2))
hist(flip10,
main="Coin flip frequencies",
xlab="side",
xlim=c(1,2))
flip10 <- sample(2,ten,replace=TRUE)
flip100 <- sample(2,hun,replace=TRUE)
flip1000 <- sample(2,thou,replace=TRUE)
flip10000 <- sample(2,tent,replace=TRUE)
hist(flip10,
main="Coin flip frequencies",
xlab="side",
xlim=c(1,2))
flip10
flip(1)
flip10(1)
flip10("1")
flip10[1]
flip10[[1}]
flip10[[1]
}
margin.table(flip10,1)
table(flip10)
table(flip10)[1]
table(flip10)[1][1]
t <- table(flip10)/10
t
flip10 <- sample(2,ten,replace=TRUE)/10
flip100 <- sample(2,hun,replace=TRUE)/100
flip1000 <- sample(2,thou,replace=TRUE)/1000
flip10000 <- sample(2,tent,replace=TRUE)/10000
freq10 <- table(flip10)
freq100 <- table(flip100)
freq1000 <- table(flip1000)
freq10000 <- table(flip10000)
hist(flip10)
hist(freq10)
freq1000
freq10
flip10 <- sample(2,ten,replace=TRUE)[2]/10
flip100 <- sample(2,hun,replace=TRUE)[2]/100
flip1000 <- sample(2,thou,replace=TRUE)[2]/1000
flip10000 <- sample(2,tent,replace=TRUE)[2]/10000
freq10 <- table(flip10)
freq100 <- table(flip100)
freq1000 <- table(flip1000)
freq10000 <- table(flip10000)
freq10
freq1000
flip10 <- sample(2,ten,replace=TRUE)
flip100 <- sample(2,hun,replace=TRUE)
flip1000 <- sample(2,thou,replace=TRUE)
flip10000 <- sample(2,tent,replace=TRUE)
freq10 <- table(flip10)
freq100 <- table(flip100)
freq1000 <- table(flip1000)
freq10000 <- table(flip10000)
freq10
attributes(freq10)
summary(freq10)
values(freq10)
table(freq10)
freq10[0]
freq10[1]
freq10[2]
freq10[2][1]
freq10[2[0]]
b <- freq10[1]
b
freq10
freq10[1,"1"]
freq10[1,1]
freq10[1]
freq10
freq10[1]
freq10[1] +1
freq10[1] / 10
flip10 <- sample(2,ten,replace=TRUE)
flip100 <- sample(2,hun,replace=TRUE)
flip1000 <- sample(2,thou,replace=TRUE)
flip10000 <- sample(2,tent,replace=TRUE)
freq10 <- table(flip10)[1]/ten
freq100 <- table(flip100)[1]/hun
freq1000 <- table(flip1000)[1]/thou
freq10000 <- table(flip10000)[1]/tent
freq10
freq100
r <- c(flip10,flip100,flip1000,flip10000)
r
flip10
r <- c(freq10,freq100,freq1000,freq10000)
r
barplot(r)
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
labels=letters[1:4])
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
)
axis(1, at=1:10, labels=letters[1:10])
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:10, labels=letters[1:10])
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=letters[1:4])
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("fsdf","dfsd","sdfsf","sdf"))
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("10 flips","100 flips","1000 flips","10000 flips"))
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("10","100","1000","10000"))
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(0.5, at=1:4, labels=c("10","100","1000","10000"))
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(0, at=1:4, labels=c("10","100","1000","10000"))
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("10","100","1000","10000"))
# Henry Chipman
# lab 6
# The biggest thing I learned from this lab was using the table data structure in R. I used
# the tables to store the frequencies of the different flips. Something else that I found from
# stack overflow was that I could create custom axis labels for barcharts.
# simulate coin flip
ten = 10
hun = 100
thou = 1000
tent = 10000
flip10 <- sample(2,ten,replace=TRUE)
flip100 <- sample(2,hun,replace=TRUE)
flip1000 <- sample(2,thou,replace=TRUE)
flip10000 <- sample(2,tent,replace=TRUE)
freq10 <- table(flip10)[1]/ten
freq100 <- table(flip100)[1]/hun
freq1000 <- table(flip1000)[1]/thou
freq10000 <- table(flip10000)[1]/tent
r <- c(flip10,flip100,flip1000,flip10000)
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("10","100","1000","10000"))
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("10","100","1000","10000"))
# simulate coin flip
ten = 10
hun = 100
thou = 1000
tent = 10000
flip10 <- sample(2,ten,replace=TRUE)
flip100 <- sample(2,hun,replace=TRUE)
flip1000 <- sample(2,thou,replace=TRUE)
flip10000 <- sample(2,tent,replace=TRUE)
freq10 <- table(flip10)[1]/ten
freq100 <- table(flip100)[1]/hun
freq1000 <- table(flip1000)[1]/thou
freq10000 <- table(flip10000)[1]/tent
r <- c(flip10,flip100,flip1000,flip10000)
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("10","100","1000","10000"))
r
# Henry Chipman
# lab 6
# The biggest thing I learned from this lab was using the table data structure in R. I used
# the tables to store the frequencies of the different flips. Something else that I found from
# stack overflow was that I could create custom axis labels for barcharts.
# simulate coin flip
ten = 10
hun = 100
thou = 1000
tent = 10000
flip10 <- sample(2,ten,replace=TRUE)
flip100 <- sample(2,hun,replace=TRUE)
flip1000 <- sample(2,thou,replace=TRUE)
flip10000 <- sample(2,tent,replace=TRUE)
freq10 <- table(flip10)[1]/ten
freq100 <- table(flip100)[1]/hun
freq1000 <- table(flip1000)[1]/thou
freq10000 <- table(flip10000)[1]/tent
r <- c(freq,freq100,freq1000,freq10000)
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("10","100","1000","10000"))
ten = 10
hun = 100
thou = 1000
tent = 10000
flip10 <- sample(2,ten,replace=TRUE)
flip100 <- sample(2,hun,replace=TRUE)
flip1000 <- sample(2,thou,replace=TRUE)
flip10000 <- sample(2,tent,replace=TRUE)
freq10 <- table(flip10)[1]/ten
freq100 <- table(flip100)[1]/hun
freq1000 <- table(flip1000)[1]/thou
freq10000 <- table(flip10000)[1]/tent
r <- c(freq10,freq100,freq1000,freq10000)
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
xaxt="n"
)
axis(1, at=1:4, labels=c("10","100","1000","10000"))
barplot(r,
xlab="Number of Flips",
main="relative frequencies of tails with coin flips",
ylim=c(0,1),
xaxt="n"
)
axis(1, at=1:4, labels=c("10","100","1000","10000"))
# Statistical calculations for driving times in seattle
data <- read.csv(file="result.csv", header=TRUE, sep=",")
drive_times <- data$response_time
##PLOT OF DRIVE TIMES TO MEDIC DISPATCH CENTERS
c<- c(0,0,0,0,0,0,0,0,0,0)
d <- round(drive_times/100)
for(i in d) {
c[i] <- c[i]+1
}
names(c) <- c("100","200","300","400","500","600","700","800","900"
,"1000")
barplot(c, las=2, main="drive time frequency distribution for drive times
from Seattle addresses to EMS response locations", xlab="drive
time (seconds)", ylab="frequency of sample addresses")
##BOXPLOT FOR DRIVE TIMES
boxplot(drive_times,horizontal=TRUE,xlab="drive time (seconds)",main="boxplot
of drive times to EMS dispatch locations in Seattle")
min(drive_times) # shortest drive time is 18 seconds
max(drive_times) # longest drive time is 980 seconds
mean(drive_times) # mean drive time from address to medic dispatch center
# is 464.2 seconds (7.75 minutes)
median(drive_times) # 425 seconds
quantile(drive_times)
# 0%   25%   50%   75%  100%
# 18.0 327.5 452.0 588.0 980.0
IQR(drive_times) # interquartile range is 260.5 seconds
sd(drive_times) # standard deviation is 189.3626 seconds
skewness(drive_times) # 0.25, there is a slight positive skew to drive times
kurtosis(drive_times) # 2.62, indicates a leptokurtic (peaked) distribution
data <- read.csv(file="result.csv", header=TRUE, sep=",")
getwd()
data <- read.csv(file="/github/mad_data_scientists/stats/result.csv", header=TRUE, sep=",")
data <- read.csv(file="/GitHub/Mad_Data_Scientists/stats/result.csv", header=TRUE, sep=",")
setwd("C:\Users\Henry\Documents\GitHub\Mad_Data_Scientists\stats")
setwd("C:/Users/Henry/Documents/GitHub/Mad_Data_Scientists/stats")
# Statistical calculations for driving times in seattle
data <- read.csv(file="result.csv", header=TRUE, sep=",")
drive_times <- data$response_time
##PLOT OF DRIVE TIMES TO MEDIC DISPATCH CENTERS
c<- c(0,0,0,0,0,0,0,0,0,0)
d <- round(drive_times/100)
for(i in d) {
c[i] <- c[i]+1
}
names(c) <- c("100","200","300","400","500","600","700","800","900"
,"1000")
barplot(c, las=2, main="drive time frequency distribution for drive times
from Seattle addresses to EMS response locations", xlab="drive
time (seconds)", ylab="frequency of sample addresses")
##BOXPLOT FOR DRIVE TIMES
boxplot(drive_times,horizontal=TRUE,xlab="drive time (seconds)",main="boxplot
of drive times to EMS dispatch locations in Seattle")
min(drive_times) # shortest drive time is 18 seconds
max(drive_times) # longest drive time is 980 seconds
mean(drive_times) # mean drive time from address to medic dispatch center
# is 464.2 seconds (7.75 minutes)
median(drive_times) # 425 seconds
quantile(drive_times)
# 0%   25%   50%   75%  100%
# 18.0 327.5 452.0 588.0 980.0
IQR(drive_times) # interquartile range is 260.5 seconds
sd(drive_times) # standard deviation is 189.3626 seconds
skewness(drive_times) # 0.25, there is a slight positive skew to drive times
kurtosis(drive_times) # 2.62, indicates a leptokurtic (peaked) distribution
qnorm(1,8.1,3)
qnorm(0.5,8.1,3)
# Statistical calculations for driving times in seattle
data <- read.csv(file="result.csv", header=TRUE, sep=",")
drive_times <- data$response_time
##PLOT OF DRIVE TIMES TO MEDIC DISPATCH CENTERS
c<- c(0,0,0,0,0,0,0,0,0,0)
d <- round(drive_times/100)
for(i in d) {
c[i] <- c[i]+1
}
names(c) <- c("100","200","300","400","500","600","700","800","900"
,"1000")
barplot(c, las=2, main="drive time frequency distribution for drive times
from Seattle addresses to EMS response locations", xlab="drive
time (seconds)", ylab="frequency of sample addresses")
##BOXPLOT FOR DRIVE TIMES
boxplot(drive_times,horizontal=TRUE,xlab="drive time (seconds)",main="boxplot
of drive times to EMS dispatch locations in Seattle")
min(drive_times) # shortest drive time is 18 seconds
max(drive_times) # longest drive time is 980 seconds
mean(drive_times) # mean drive time from address to medic dispatch center
# is 464.2 seconds (7.75 minutes)
median(drive_times) # 425 seconds
quantile(drive_times)
# 0%   25%   50%   75%  100%
# 18.0 327.5 452.0 588.0 980.0
IQR(drive_times) # interquartile range is 260.5 seconds
sd(drive_times) # standard deviation is 189.3626 seconds
skewness(drive_times) # 0.25, there is a slight positive skew to drive times
kurtosis(drive_times) # 2.62, indicates a leptokurtic (peaked) distribution
### ESTSiMATE RESPONSE TImeS BASED ON ACTUAL EMS DATA
rmean <- 8.1
rstdev <- 3
processing <- 2.4
mean(drive_times)
pnorm(8.1,8.1,3)
foreach(d in data$response_time){
}
data$response_time
data$response_time.lenght
data$response_time.length
data$response_time.length()
data$response_time.size
length(data$response_time)
foreach(d in length(data$response_time)){
}
foreach(i in 1:length(data$response_time)){
}
1:length(data$response_time)
for(i in data$response_time){
}
for(i in data$response_time){
i
}
responses <- c(1:length(data$response_time))
responses <- c(1:length(data$response_time))
responses <- c()
data$calculatedResponse <- 0
data$calculatedResponse <- 0
for(d in data){
d$calculatedResponse <- 1
}
d$calculatedResponse
for(d in data){
d$calculatedResponse
}
lapply(data, function(df) {
NULL
})
data$calculatedResponse <- 0
lapply(data, function(df) {
df$calculatedResponse <- 1
NULL
})
data$calculatedResponse <- 0
lapply(data, function(df) {
calculatedResponse <- 1
NULL
})
lapply(data, function(df) {
$calculatedResponse <- 1
NULL
})
data$calculatedResponse <- 0
for(d in data){
d$calculatedResponse
}
help(print)
data$calculatedResponse <- 0
for(d in data){
print(d)
}
print(d[0])
print(d)
data$calculatedResponse <- 0
for(d in data$response_time){
print(d)
}
data$calculatedResponse <- vector(mode="int",length=10)
data$calculatedResponse <- vector(mode="integer",length=10)
data$calculatedResponse <- vector(mode="integer",length=length(data))
# Statistical calculations for driving times in seattle
data <- read.csv(file="result.csv", header=TRUE, sep=",")
drive_times <- data$response_time
##PLOT OF DRIVE TIMES TO MEDIC DISPATCH CENTERS
c<- c(0,0,0,0,0,0,0,0,0,0)
d <- round(drive_times/100)
for(i in d) {
c[i] <- c[i]+1
}
names(c) <- c("100","200","300","400","500","600","700","800","900"
,"1000")
barplot(c, las=2, main="drive time frequency distribution for drive times
from Seattle addresses to EMS response locations", xlab="drive
time (seconds)", ylab="frequency of sample addresses")
##BOXPLOT FOR DRIVE TIMES
boxplot(drive_times,horizontal=TRUE,xlab="drive time (seconds)",main="boxplot
of drive times to EMS dispatch locations in Seattle")
min(drive_times) # shortest drive time is 18 seconds
max(drive_times) # longest drive time is 980 seconds
mean <- mean(drive_times) # mean drive time from address to medic dispatch center
# is 464.2 seconds (7.75 minutes)
median(drive_times) # 425 seconds
quantile(drive_times)
# 0%   25%   50%   75%  100%
# 18.0 327.5 452.0 588.0 980.0
IQR(drive_times) # interquartile range is 260.5 seconds
stdv <- sd(drive_times) # standard deviation is 189.3626 seconds
skewness(drive_times) # 0.25, there is a slight positive skew to drive times
kurtosis(drive_times) # 2.62, indicates a leptokurtic (peaked) distribution
### ESTSiMATE RESPONSE TImeS BASED ON ACTUAL EMS DATA
rmean <- 8.1
rstdev <- 3
processing <- 2.4
data$calculatedResponse <- vector(mode="integer",length=length(data))
i <- 1
for(d in data$response_time){
dif <- d-mean
s <- dif/stdv
data$calculatedResponse[i] <- s
i <- i+1
}
data
data$calculatedResponse
mean(data$calculatedResponse)
data$calculatedResponse <- vector(mode="integer",length=length(data))
i <- 1
for(d in data$response_time){
dif <- d-mean
s <- dif/stdv
k <- rmean+(rstdev*s)
data$calculatedResponse[i] <- s
i <- i+1
}
data$calculatedResponse
data$calculatedResponse <- vector(mode="integer",length=length(data))
i <- 1
for(d in data$response_time){
dif <- d-mean
s <- dif/stdv
k <- rmean+(rstdev*s)
data$calculatedResponse[i] <- k
i <- i+1
}
data$calculatedResponse
data$calculatedResponse <- vector(mode="integer",length=length(data))
i <- 1
for(d in data$response_time){
dif <- d-mean
s <- dif/stdv
k <- rmean+(rstdev*s)
data$calculatedResponse[i] <- k*60
i <- i+1
}
data$calculatedResponse
max(data$calculatedResponse)
write.csv(data, file="data")
write.csv(data, file="data.csv")
mean
stdv
